// Mocks generated by Mockito 5.4.4 from annotations
// in tagged_todos_organizer/test/parts/parts_editor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tagged_todos_organizer/parts/domain/part.dart' as _i2;
import 'package:tagged_todos_organizer/parts/domain/parts_info_repo.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePart_0 extends _i1.SmartFake implements _i2.Part {
  _FakePart_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PartsInfoRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartsInfoRepo extends _i1.Mock implements _i3.PartsInfoRepo {
  MockPartsInfoRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Part> getPart(String? maximoNo) => (super.noSuchMethod(
        Invocation.method(
          #getPart,
          [maximoNo],
        ),
        returnValue: _i4.Future<_i2.Part>.value(_FakePart_0(
          this,
          Invocation.method(
            #getPart,
            [maximoNo],
          ),
        )),
      ) as _i4.Future<_i2.Part>);

  @override
  dynamic updatePartsFromFile({required String? filePath}) =>
      super.noSuchMethod(Invocation.method(
        #updatePartsFromFile,
        [],
        {#filePath: filePath},
      ));
}
